name: build and deploy container app

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
        description: Branch name

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.branch-name-check.outputs.env_name }}
    steps:
      - name: Check branch name
        id: branch-name-check
        run: |
          echo "Running on branch ${{ inputs.branch }}"
            if [ "${{ inputs.branch}}" = "refs/heads/main" ]; then
              echo "env_name=production" >> $GITHUB_OUTPUT
            elif [ "${{ inputs.branch}}" = "refs/heads/develop" ]; then
              echo "env_name=develop" >> $GITHUB_OUTPUT
            elif [ "${{ inputs.branch}}" = "refs/heads/staging" ]; then
              echo "env_name=staging" >> $GITHUB_OUTPUT
            else
              echo "skip"
              exit 1
            fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: check
    environment: ${{ needs.check.outputs.env_name }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GithubActions@${{ github.sha }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: load env variables
        shell: bash
        env:
          ENV_VARIABLES: ${{ toJson(vars)}}
          SECRETS: ${{ toJson(secrets) }}
        run: |
          declare -A secrets_array
          while IFS='=' read -r key value; do
              secrets_array[$key]=$value
          done < <(echo "$SECRETS" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]')
          for key in "${!secrets_array[@]}"
          do
              value="${secrets_array[$key]}"
              export "$key"="$value"
          done

          declare -A env_array
          while IFS='=' read -r key value; do
              env_array[$key]=$value
              echo "Read key=$key, value=$value"
          done < <(echo "$ENV_VARIABLES" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]')
          for key in "${!env_array[@]}"
          do
              value="${env_array[$key]}"
              echo "Exporting $key=$value"
              export "$key"="$value"
          done

          touch .docker/${{ needs.check.outputs.env_name }}/php/env

          envsubst < .github/envs/${{ needs.check.outputs.env_name }}/.env.${{ needs.check.outputs.env_name }} > .docker/${{ needs.check.outputs.env_name }}/php/env

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
